{{/*
Resolves specific worker node value
Example usage for license: {{ default $.Values.graphdb.workers.license (include "resolveWorkerValue" (dict "nodes" $.Values.graphdb.workers.nodes "value_name" "license" "worker_index" $worker_index )) }}
The example will return the global workers license or a specific worker license IF PRESENT, resolves the following values.yaml syntax:
  workers:
    license: graphdb-workers-license
    nodes:
        - name: worker-1
          license: graphdb-worker1-license
*/}}
{{- define "resolveWorkerValue" -}}
{{- $worker_index:=.worker_index }}
{{- $value_name:=.value_name }}
  {{- range .nodes }}
    {{- if (eq (trimPrefix "worker-" .name | int64) ( $worker_index | int64)) }}
      {{- if (hasKey . $value_name) }}
        {{- if or (kindIs "map" (get . $value_name)) (kindIs "slice" (get . $value_name)) }} {{- get . $value_name | toYaml }} {{- else }} {{- get . $value_name }} {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{/*
Same as above, but for masters nodes
*/}}
{{- define "resolveMasterValue" -}}
{{- $master_index:=.master_index }}
{{- $value_name:=.value_name }}
{{- range .nodes }}
  {{- if (eq (trimPrefix "master-" .name | int64) ( $master_index | int64)) }}
    {{- if (hasKey . $value_name) }}
      {{- if or (kindIs "map" (get . $value_name)) (kindIs "slice" (get . $value_name)) }} {{- get . $value_name | toYaml }} {{- else }} {{- get . $value_name }} {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}

{{- define "shouldRenderBackupVolumeClaimTemplate" -}}
  {{- if or .backupRestore.enable_backups .backupRestore.enable_restore }}
      {{- if and .backupRestore.persistence.volumeClaimTemplateSpec (eq .master_index 1)}}
        {{- print true -}}
      {{- end }}
  {{- end }}
{{- end }}

{{- define "shouldRenderToolsVolumeClaimTemplate" -}}
  {{- if or .tools.preload.trigger .tools.loadrdf.trigger }}
    {{- if and .tools.persistence.volumeClaimTemplateSpec (eq .master_index 1)}}
      {{- print "true" -}}
    {{- end }}
  {{- end }}
{{- end }}

{{- define "resolveDeploymentHost" -}}
  {{- $global := .Values.global | default dict -}}
  {{- $globalDeployment := $global.deployment | default dict -}}
  {{- print (index $globalDeployment "host" | default (index $global "ingressHost") | default .Values.deployment.host) -}}
{{- end }}

{{/*
Combined image pull secrets
*/}}
{{- define "combinedImagePullSecrets" -}}
  {{- $secrets := list -}}

  {{- if .Values.deployment.imagePullSecret -}}
    {{- $secret := dict "name" .Values.deployment.imagePullSecret -}}
    {{- $secrets = append $secrets $secret -}}
  {{- end -}}

  {{- if and .Values.global .Values.global.imagePullSecrets -}}
    {{- $secrets = concat $secrets .Values.global.imagePullSecrets -}}
  {{- end -}}

  {{- toYaml $secrets -}}
{{- end -}}

{{/*
Rendenders a volumeClaimTemplate as yaml.
If the storage class name is not specified - 'global.storageClass' is checked and if set it is used as the storageClassName for the template.
Otherwise it is left blank and cluster default will be used.
*/}}
{{- define "renderVolumeClaimTemplateSpec" }}
  {{- if and .globalStorageClassName (not .spec.storageClassName) }}
    {{- $spec := set .spec "storageClassName" .globalStorageClassName }}
    {{- $spec | toYaml }}
  {{- else }}
    {{- .spec | toYaml }}
  {{- end }}
{{- end }}

{{/*
Renders full name of the graphdb pod
*/}}
{{- define "renderFullImageName" -}}
  {{- $fullImageName := .image.repository -}}

  {{- if or .globalRegistry .image.registry -}}
    {{- $fullImageName = printf "%s/%s" (.globalRegistry | default .image.registry) .image.repository -}}
  {{- end -}}

  {{- if .image.tag -}}
    {{- printf "%s:%s" $fullImageName .image.tag -}}
  {{- else -}}
    {{- print $fullImageName -}}
  {{- end -}}
{{- end -}}
